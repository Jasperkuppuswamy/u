# -*- coding: utf-8 -*-
"""mylab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oWFt8BITx5PxjuoYbkZM1yBWrFPK9tMy
"""

#input two text file and do set oprations

import re
import nltk
nltk.download('punkt')

def process_file(filename):
  with open(filename, encoding='utf-8') as fp:
    text = fp.read()
    text = text.strip()
    text = re.sub(r'[^\w\s]', '', text)
    tokens = nltk.word_tokenize(text)
    return tokens

file1 = process_file("to do list.txt")
print(file1)
file2 = process_file("to do list.txt")
print(file2)

#merge the file
merge=file1 + file2
print(merge)

#set operations  for list
#intersection
intersection=list(set(file1)|set(file2))
intersection

#union
union=list(set(file1)&set(file2))
union

#difference
#intersection
diff=list(set(file1)-set(file2))
diff



my_list = [1, 2, 3, 1, 4, 2, 5, 6, 3, 7, 8, 2, 1, 5, 9]

def print_elements_with_frequency_greater_than_k(lst, k):
    # create a dictionary to store the frequency of each element in the list
    freq_dict = {}
    for elem in lst:
        freq_dict[elem] = freq_dict.get(elem, 0) + 1
        

    # print the elements with frequency greater than k
    for elem, freq in freq_dict.items():
        if freq > k:
            print(elem)
print_elements_with_frequency_greater_than_k(my_list, 2)

import collections

# Assuming tokens is a list of tokens

# Use the Counter class from collections to count the frequency of each token
token_counts = collections.Counter(merge)


# Convert the token_counts result to a dictionary
token_freq_dict = dict(token_counts)

# Print the resulting dictionary
print(token_freq_dict)

#palindrome using the list 
 # Check if a word is in the text file
word = 'REGRESSION'  # replace with the word you want to check
if word in merge:
        # Check if the word is a palindrome
  if word == word[::-1]:
            print(f"{word} is a palindrome")
  else:
            print(f"{word} is not a palindrome")
else:
        print(f"{word} is not in the text file")

# access from dictionary

K = 3

for key, value in token_freq_dict.items():
    if value > K:
        #print(key, ":", value)
        print(f"{key}:{value}")









